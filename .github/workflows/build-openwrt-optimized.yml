name: üíª Build OpenWrt (x86_64) - Optimized
permissions:
  contents: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      ssrp:
        description: "üöÄ ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      openclash:
        description: "‚ö° OpenClash"
        type: boolean
        default: true
      lucky:
        description: "üçÄ Lucky"
        type: boolean
        default: true
      oaf:
        description: "üõ°Ô∏è OpenAppFilter"
        type: boolean
        default: true
      use_prebuilt_toolchain:
        description: "üîß ‰ΩøÁî®È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ"
        type: boolean
        default: false  # üî• ÈªòËÆ§ÂÖ≥Èó≠ÔºåÈÅøÂÖçÂÖºÂÆπÊÄßÈóÆÈ¢ò
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false
jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    steps:
      # ============================================
      # 1. ÁéØÂ¢ÉÂàùÂßãÂåñ
      # ============================================
      - name: üîß Setup Environment
        id: env
        run: |
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # ÊûÑÂª∫‰ø°ÊÅØ
          VERSION=$(date +'%Y.%m.%d')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # ‰ºòÂåñÂπ∂Ë°åÂ∫¶ËÆ°ÁÆó - Êõ¥‰øùÂÆàÁöÑÁ≠ñÁï•
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          
          # üî• ‰øÆÂ§çÔºöÊõ¥‰øùÂÆàÁöÑÂπ∂Ë°åÂ∫¶ËÆ°ÁÆó
          if [ $MEM_GB -lt 8 ]; then
            JOBS=2
          elif [ $MEM_GB -lt 16 ]; then
            JOBS=4
          else
            JOBS=$((MEM_GB / 4))
            JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          fi
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          # Êèí‰ª∂ÂìàÂ∏å
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-12)
          
          # ÊúàÂ∫¶ÈîÆ
          MONTH_KEY=$(date +'%Y%m')
          
          # ÊòæÁ§∫Á≥ªÁªü‰ø°ÊÅØ
          echo "====================================="
          echo "üìä System Information"
          echo "====================================="
          echo "CPU: $(nproc) cores"
          echo "Memory: ${MEM_GB}GB"
          echo "Compile Jobs: $JOBS"
          echo "Build: $VERSION ($BUILD_ID)"
          echo "Plugins Hash: $PLUGINS_HASH"
          echo "====================================="
          
          # ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
            echo "PLUGINS_HASH=$PLUGINS_HASH"
            echo "MONTH_KEY=$MONTH_KEY"
          } >> $GITHUB_ENV
      # ============================================
      # 2. Á≥ªÁªü‰ºòÂåñ
      # ============================================
      - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: üíæ Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
      # ============================================
      # 3. ‰ª£Á†ÅÊ£ÄÂá∫
      # ============================================
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      # ============================================
      # 4. ÊûÑÂª∫‰æùËµñÂÆâË£Ö
      # ============================================
      - name: üõ†Ô∏è Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: üì¶ Install LLVM
        uses: sbwml/actions@install-llvm
      # ============================================
      # 5. Ê∫êÁ†ÅÂáÜÂ§á
      # ============================================
      - name: üì• Prepare OpenWrt Source
        run: |
          echo "üîÑ Cloning OpenWrt source..."
          rm -rf openwrt
          
          for attempt in 1 2 3; do
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "‚ùå Attempt $attempt failed, retrying..."
            rm -rf openwrt
            sleep 10
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊ∫êÁ†ÅÂìàÂ∏å
          SOURCE_HASH=$(git rev-parse HEAD)
          echo "SOURCE_HASH=$SOURCE_HASH" >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
          COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
          IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV
      # ============================================
      # 6. üî• ‰øÆÂ§çÂêéÁöÑÁºìÂ≠òÁ≠ñÁï•
      # ============================================
      - name: ‚òÅÔ∏è Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-v9
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-
            downloads-
      - name: ‚òÅÔ∏è Cache ccache
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.MONTH_KEY }}-v9
          restore-keys: |
            ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            ccache-${{ env.REPO_BRANCH }}-
      # üî• Âè™ÊúâÂú®‰∏ç‰ΩøÁî®È¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÊó∂ÊâçÁºìÂ≠òÂ∑•ÂÖ∑Èìæ
      - name: ‚òÅÔ∏è Cache Toolchain
        if: github.event.inputs.force_clean != 'true' && github.event.inputs.use_prebuilt_toolchain != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
            openwrt/build_dir/host*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v9
          restore-keys: |
            toolchain-${{ env.REPO_BRANCH }}-
      # ============================================
      # 7. üî• ‰øÆÂ§çÈ¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÈÄªËæë
      # ============================================
      - name: üîß Download Prebuilt Toolchain
        if: github.event.inputs.use_prebuilt_toolchain == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "üîç Looking for prebuilt toolchain..."
          
          # Â∞ùËØï‰∏ãËΩΩÈ¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ
          TOOLCHAIN_URL="https://github.com/${{ github.repository }}/releases/download/toolchain-${{ env.REPO_BRANCH }}/toolchain-x86_64-${{ env.SOURCE_HASH }}.tar.gz"
          
          if curl -fsSL "$TOOLCHAIN_URL" -o toolchain.tar.gz 2>/dev/null; then
            echo "‚úÖ Found prebuilt toolchain, extracting..."
            tar -xzf toolchain.tar.gz
            rm toolchain.tar.gz
            echo "TOOLCHAIN_PREBUILT=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Prebuilt toolchain not found, will build from scratch"
            echo "TOOLCHAIN_PREBUILT=false" >> $GITHUB_ENV
          fi
      # ============================================
      # 8. Feeds ÈÖçÁΩÆ
      # ============================================
      - name: üìö Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          
          echo "üîÑ Updating feeds..."
          rm -rf feeds tmp/packagecache
          
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
          fi
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # ============================================
      # 9. ccache ÈÖçÁΩÆ
      # ============================================
      - name: üîß Setup ccache
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          
          mkdir -p "$CCACHE_DIR"
          
          # üî• ÈÄÇ‰∏≠ÁöÑccacheÈÖçÁΩÆÔºåÈÅøÂÖçÂÜÖÂ≠ò‰∏çË∂≥
          ccache -M 12G
          ccache -F 100000
          
          ccache --set-config=compression=true
          ccache --set-config=stats=true
          ccache --set-config=max_files=100000
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          ccache --set-config=hash_dir=false
          
          echo "üìä ccache configuration:"
          ccache -p | head -10
          echo "üìä Initial ccache stats:"
          ccache -s
      # ============================================
      # 10. ÈÖçÁΩÆÂ∫îÁî®
      # ============================================
      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # ÊâßË°åËá™ÂÆö‰πâËÑöÊú¨
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          # üî• Á°Æ‰øùËÑöÊú¨Â≠òÂú®ÂêéÂÜçÊâßË°å
          if [ -f "${{ github.workspace }}/scripts/preset-mihimo-core.sh" ]; then
            chmod +x "${{ github.workspace }}/scripts/preset-mihimo-core.sh"
            "${{ github.workspace }}/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL"
          fi
          
          if [ -f "${{ github.workspace }}/scripts/preset-adguard-core.sh" ]; then
            chmod +x "${{ github.workspace }}/scripts/preset-adguard-core.sh"
            "${{ github.workspace }}/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
          fi
          
          # ÁîüÊàêÈÖçÁΩÆ
          echo "‚öôÔ∏è Generating defconfig..."
          make defconfig
          
          # ÊèêÂèñÁõÆÊ†á‰ø°ÊÅØ
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          echo "üì± Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
      # ============================================
      # 11. Âº∫Âà∂Ê∏ÖÁêÜ
      # ============================================
      - name: üßπ Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "üßπ Force cleaning build directory..."
          make dirclean
          make defconfig
      # ============================================
      # 12. ‰∏ãËΩΩ‰æùËµñ
      # ============================================
      - name: üì• Download Packages
        run: |
          cd "$OPENWRT_PATH"
          echo "üì• Downloading packages..."
          
          # ÈÄÇ‰∏≠ÁöÑ‰∏ãËΩΩÂπ∂Ë°åÂ∫¶
          DOWNLOAD_JOBS=$((COMPILE_JOBS * 2))
          DOWNLOAD_JOBS=$((DOWNLOAD_JOBS > 16 ? 16 : DOWNLOAD_JOBS))
          
          make download -j"$DOWNLOAD_JOBS" || make download -j1
      # ============================================
      # 13. üî• ‰øÆÂ§çÂêéÁöÑÁºñËØëÁ≠ñÁï•
      # ============================================
      - name: üî® Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          # ËÆæÁΩÆÁºñËØëÁéØÂ¢É
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CONFIG_CCACHE=y
          
          echo "üî® Starting compilation..."
          echo "üíæ Available memory: $(free -h | grep '^Mem:' | awk '{print $7}')"
          echo "üîß Using $COMPILE_JOBS jobs"
          
          echo "üìä ccache stats (before):"
          ccache -s
          
          # üî• ‰øÆÂ§çÁºñËØëÁ≠ñÁï• - Áªü‰∏ÄÁöÑÁºñËØëÊµÅÁ®ã
          echo "üöÄ Building firmware..."
          
          # Á¨¨‰∏ÄÊ¨°Â∞ùËØïÔºöÂπ∂Ë°åÁºñËØë
          if make -j"$COMPILE_JOBS"; then
            echo "‚úÖ Parallel compilation succeeded"
          else
            echo "‚ö†Ô∏è Parallel compilation failed, trying single-threaded..."
            # Á¨¨‰∫åÊ¨°Â∞ùËØïÔºöÂçïÁ∫øÁ®ãÁºñËØë
            if make -j1 V=s; then
              echo "‚úÖ Single-threaded compilation succeeded"
            else
              echo "‚ùå Compilation failed"
              
              # ËæìÂá∫ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
              echo "=== Build Error Details ==="
              find . -name "*.log" -exec echo "=== {} ===" \; -exec tail -50 {} \; 2>/dev/null || true
              exit 1
            fi
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Compilation completed"
          echo "üìä ccache stats (after):"
          ccache -s
      # ============================================
      # 14. ÁºìÂ≠òÁªüËÆ°
      # ============================================
      - name: üìä Cache Statistics
        if: always()
        run: |
          cd "$OPENWRT_PATH"
          echo "=== üìä Cache Effectiveness Report ==="
          echo "Date: $(date)"
          echo "Source Hash: ${{ env.SOURCE_HASH }}"
          echo "Plugins Hash: ${{ env.PLUGINS_HASH }}"
          echo ""
          
          echo "üìÅ Directory Sizes:"
          du -sh dl/ 2>/dev/null | sed 's/^/  /' || echo "  dl/: Not found"
          du -sh .ccache/ 2>/dev/null | sed 's/^/  /' || echo "  .ccache/: Not found"
          du -sh staging_dir/ 2>/dev/null | sed 's/^/  /' || echo "  staging_dir/: Not found"
          echo ""
          
          echo "üéØ ccache Statistics:"
          export CCACHE_DIR="$PWD/.ccache"
          ccache -s | grep -E "(cache hit|cache miss|hit rate)" | sed 's/^/  /' || echo "  ccache stats not available"
          echo ""
          
          echo "üîß Build Status:"
          echo "  Prebuilt Toolchain: ${TOOLCHAIN_PREBUILT:-false}"
          echo "  Compile Jobs: $COMPILE_JOBS"
          echo "================================="
      # ============================================
      # 15. Êï¥ÁêÜÂõ∫‰ª∂
      # ============================================
      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          
          echo "=== Generated Files ==="
          ls -lah
          
          # Ëé∑ÂèñÂÜÖÊ†∏ÁâàÊú¨
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "$OPENWRT_PATH/.config" build.config
          
          # ÁîüÊàêÂõ∫‰ª∂‰ø°ÊÅØ
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "source_hash": "$SOURCE_HASH",
            "toolchain_prebuilt": ${TOOLCHAIN_PREBUILT:-false},
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      # ============================================
      # 16. ‰∏ä‰º†ÂíåÂèëÂ∏É
      # ============================================
      - name: üì§ Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      - name: üöÄ Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} ‚Ä¢ ${{ env.FIRMWARE_TAG }} ‚Ä¢ Fixed
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}] - Fixed Build
            
            ### üìä ÊûÑÂª∫‰ø°ÊÅØ
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |------|------|
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏** | `${{ steps.organize.outputs.kernel_version }}` |
            | **Ê∫êÁ†ÅÂìàÂ∏å** | `${{ env.SOURCE_HASH }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **ÂØÜÁ†Å** | `${{ github.event.inputs.root_password }}` |
            
            ### üîß ‰øÆÂ§çÂÜÖÂÆπ
            - ‚úÖ ‰øÆÂ§ç‰∫ÜÈ¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÂÖºÂÆπÊÄßÈóÆÈ¢ò
            - ‚úÖ ‰ºòÂåñ‰∫ÜÁºñËØëÁ≠ñÁï•ÂíåÈîôËØØÂ§ÑÁêÜ
            - ‚úÖ ÊîπËøõ‰∫ÜÁºìÂ≠òÈÄªËæëÂíåÂπ∂Ë°åÂ∫¶ËÆ°ÁÆó
            - ‚úÖ Â¢ûÂº∫‰∫ÜÈîôËØØËØäÊñ≠ÂíåÊó•ÂøóËæìÂá∫
            
            ### üì¶ ÂåÖÂê´ÁöÑÊèí‰ª∂
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
