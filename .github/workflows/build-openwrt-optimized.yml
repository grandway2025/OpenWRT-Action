name: üíª Build OpenWrt (x86_64) - Ultimate Enhanced

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.10.1"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      ssrp:
        description: "üöÄ ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      openclash:
        description: "‚ö° OpenClash"
        type: boolean
        default: true
      lucky:
        description: "üçÄ Lucky"
        type: boolean
        default: true
      oaf:
        description: "üõ°Ô∏è OpenAppFilter"
        type: boolean
        default: true
      use_prebuilt_toolchain:
        description: "üîß ‰ΩøÁî®È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ (ÂÆûÈ™åÊÄß)"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 480

    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}

    steps:
      # ============================================
      # üéØ 1. ÊÅ¢Â§çÂéüÁâàÁéØÂ¢ÉËÆæÁΩÆ (ÊèêÈ´òÁºìÂ≠òÂëΩ‰∏≠Áéá)
      # ============================================
      - name: üîß Setup Environment Variables (Original Settings)
        id: setup-env
        run: |
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # üéØ ÊÅ¢Â§çÂéüÁâàÊó∂Èó¥Ê†ºÂºè - ÂÖ≥ÈîÆ‰ºòÂåñÁÇπ
          VERSION=$(date +'%Y.%m.%d')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # üöÄ ÊÅ¢Â§çÂéüÁâàÂπ∂Ë°åÂ∫¶Á≠ñÁï• (53%ÂëΩ‰∏≠ÁéáÁöÑÂÖ≥ÈîÆ)
          PROC_COUNT=$(nproc)
          MEM_GB=$(( $(free -m | awk '/^Mem:/{print $2}') / 1024 ))
          JOBS=$(( MEM_GB / 2 ))
          JOBS=$(( JOBS > PROC_COUNT ? PROC_COUNT : JOBS ))
          JOBS=$(( JOBS < 1 ? 1 : JOBS ))
          
          # üéØ Á®≥ÂÆöÁöÑÁºìÂ≠òÈîÆÁ≠ñÁï• (Âü∫‰∫éÂéüÁâàÊúÄ‰Ω≥ÂÆûË∑µ)
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)
          
          # üéØ ‰ºòÂåñÊó∂Èó¥ÈîÆ - ‰ΩøÁî®Êõ¥Á®≥ÂÆöÁöÑÂë®Êúü
          WEEK_KEY=$(date +'%Y%U')
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
          echo "COMPILE_JOBS=$JOBS" >> $GITHUB_ENV
          echo "PLUGINS_HASH=$PLUGINS_HASH" >> $GITHUB_ENV
          echo "WEEK_KEY=$WEEK_KEY" >> $GITHUB_ENV
          
          echo "üéØ Cache Strategy Restored:"
          echo "  CPU Cores: $PROC_COUNT"
          echo "  Memory (GB): $MEM_GB"
          echo "  Compile Jobs: $JOBS"
          echo "  Plugins Hash: $PLUGINS_HASH"
          echo "  Week Key: $WEEK_KEY"

      - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk

      - name: üíæ Setup Swap and Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          # üéØ ÊÅ¢Â§çÂéüÁâàÂÜÖÂ≠òÂèÇÊï∞ (ÁºìÂ≠ò‰ºòÂåñ)
          sudo tee -a /etc/sysctl.conf >/dev/null << EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          free -h

      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üì• Clone OpenWrt Repository (Enhanced Retry)
        id: clone-source
        run: |
          rm -rf openwrt
          success=false
          for i in 1 2 3; do
            if git clone --depth=1 -b "$REPO_BRANCH" "$REPO_URL" openwrt; then
              success=true
              break
            fi
            echo "‚ùå Clone attempt $i failed, retrying..."
            rm -rf openwrt
            sleep 10
          done
          
          if [ "$success" != "true" ]; then
            echo "‚ùå Failed to clone OpenWrt repository after 3 attempts"
            exit 1
          fi
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          SOURCE_HASH=$(git rev-parse HEAD)
          echo "SOURCE_HASH=$SOURCE_HASH" >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
          COMMIT_INFO=$(git log -1 --pretty=format:"%an|%ci|%s|%H")
          IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          echo "COMMIT_AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "COMMIT_DATE=$DATE" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$HASH" >> $GITHUB_ENV
          
          echo "‚úÖ Source ready: $SOURCE_HASH"

      # ============================================
      # üöÄ 2. ÁªàÊûÅÁºìÂ≠òÁ≠ñÁï• - ÊÅ¢Â§ç53%ÂëΩ‰∏≠Áéá
      # ============================================
      - name: ‚òÅÔ∏è Cache Downloads (Ê∞∏‰πÖÁºìÂ≠ò)
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-v6
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            downloads-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Toolchain (Ê∫êÁ†ÅÁªëÂÆö)
        if: ${{ inputs.force_clean != true }}
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v7
          restore-keys: |
            toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            toolchain-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Staging Directory (Ê∫êÁ†ÅÁªëÂÆö)
        if: ${{ inputs.force_clean != true }}
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: staging-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v5
          restore-keys: |
            staging-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            staging-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Build Host (Êèí‰ª∂ÁªëÂÆö)
        if: ${{ inputs.force_clean != true }}
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/host*
          key: buildhost-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v5
          restore-keys: |
            buildhost-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            buildhost-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache ccache (ÊøÄËøõ‰ºòÂåñ)
        if: ${{ inputs.force_clean != true }}
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-${{ env.WEEK_KEY }}-v7
          restore-keys: |
            ccache-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            ccache-${{ env.REPO_BRANCH }}-

      # ============================================
      # üîß 3. ‰øÆÂ§çÈ¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÂÖºÂÆπÊÄßÈóÆÈ¢ò
      # ============================================
      - name: üîß Download Prebuilt Toolchain (Enhanced)
        if: ${{ inputs.use_prebuilt_toolchain == true }}
        id: download-toolchain
        continue-on-error: true
        run: |
          cd "$OPENWRT_PATH"
          echo "üîç Attempting to download prebuilt toolchain..."
          
          # Â§öÊ∫ê‰∏ãËΩΩÁ≠ñÁï•
          TOOLCHAIN_URLS=(
            "https://github.com/${{ github.repository }}/releases/download/toolchain-${REPO_BRANCH}/toolchain-x86_64-${SOURCE_HASH}.tar.gz"
            "https://github.com/${{ github.repository }}/releases/download/toolchain-${REPO_BRANCH}/toolchain-x86_64-latest.tar.gz"
          )
          
          toolchain_downloaded=false
          for url in "${TOOLCHAIN_URLS[@]}"; do
            echo "üåê Trying: $url"
            if curl -fsSL --max-time 90 "$url" -o toolchain.tar.gz; then
              echo "üì¶ Extracting toolchain..."
              if tar -xzf toolchain.tar.gz; then
                echo "TOOLCHAIN_PREBUILT=true" >> $GITHUB_ENV
                rm toolchain.tar.gz
                toolchain_downloaded=true
                echo "‚úÖ Prebuilt toolchain ready"
                
                # üîß ‰øÆÂ§çÂ∑•ÂÖ∑ÈìæÂÖºÂÆπÊÄßÈóÆÈ¢ò
                echo "üîß Fixing toolchain compatibility..."
                
                # Ê£ÄÊü•Âπ∂‰øÆÂ§çÁ¨¶Âè∑ÈìæÊé•
                if [ -d "staging_dir/toolchain-x86_64_gcc-13.3.0_musl" ]; then
                  cd staging_dir/toolchain-x86_64_gcc-13.3.0_musl
                  # ‰øÆÂ§çÊΩúÂú®ÁöÑË∑ØÂæÑÈóÆÈ¢ò
                  find . -type l -exec test ! -e {} \; -delete 2>/dev/null || true
                  cd "$OPENWRT_PATH"
                fi
                
                # ‰øÆÂ§çÊûÑÂª∫ÁõÆÂΩïÊùÉÈôê
                chmod -R u+w build_dir/toolchain-* 2>/dev/null || true
                
                break
              else
                echo "‚ùå Failed to extract $url"
                rm -f toolchain.tar.gz
              fi
            else
              echo "‚ùå Failed to download $url"
            fi
          done
          
          if [ "$toolchain_downloaded" != "true" ]; then
            echo "TOOLCHAIN_PREBUILT=false" >> $GITHUB_ENV
            echo "‚ö†Ô∏è No prebuilt toolchain available, will build from source"
          fi

      - name: üìö Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          rm -rf feeds tmp/packagecache
          
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
          fi
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # ============================================
      # üéØ 4. ÊÅ¢Â§çÂéüÁâàccacheÈÖçÁΩÆ (53%ÂëΩ‰∏≠Áéá)
      # ============================================
      - name: üîß Setup ccache (Original Config)
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          
          mkdir -p "$CCACHE_DIR"
          
          # üéØ ÊÅ¢Â§çÂéüÁâàccacheÈÖçÁΩÆ
          ccache -M 15G
          ccache -F 150000
          ccache --set-config=compression=true
          ccache --set-config=stats=true
          ccache --set-config=max_files=150000
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          
          echo "üìã ccache configuration:"
          ccache -p
          echo "üìä ccache stats:"
          ccache -s

      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          [ -d "$GITHUB_WORKSPACE/files" ] && cp -r "$GITHUB_WORKSPACE/files" .
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          for s in preset-mihomo-core.sh preset-adguard-core.sh; do
            if [ -f "${{ github.workspace }}/scripts/$s" ]; then
              chmod +x "${{ github.workspace }}/scripts/$s"
              "${{ github.workspace }}/scripts/$s" "$CLASH_KERNEL"
            fi
          done
          
          make defconfig
          
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      - name: üßπ Clean Build Directory
        if: ${{ inputs.force_clean == true }}
        run: |
          cd "$OPENWRT_PATH"
          cp .config .config.backup
          make dirclean
          cp .config.backup .config
          make defconfig

      - name: üì• Download Packages
        run: |
          cd "$OPENWRT_PATH"
          DOWNLOAD_JOBS=$((COMPILE_JOBS < 16 ? COMPILE_JOBS * 2 : 16))
          
          if command -v aria2c >/dev/null 2>&1; then
            make download -j"$DOWNLOAD_JOBS" DOWNLOAD_TOOL="aria2c -x 4 -s 4" || make download -j1
          else
            make download -j"$DOWNLOAD_JOBS" || make download -j1
          fi

      # ============================================
      # üî® 5. Êô∫ËÉΩÁºñËØëÁ≠ñÁï• (‰øÆÂ§çÈ¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÈóÆÈ¢ò)
      # ============================================
      - name: üî® Compile Firmware (Enhanced Error Handling)
        id: compile
        timeout-minutes: 360
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CONFIG_CCACHE=y
          
          echo "üî® Starting compilation..."
          echo "üîß Prebuilt Toolchain: ${TOOLCHAIN_PREBUILT:-false}"
          echo "üíæ Compile Jobs: $COMPILE_JOBS"
          
          ccache -s
          
          # üéØ Êô∫ËÉΩÁºñËØëÁ≠ñÁï•
          compile_success=false
          
          # Èò∂ÊÆµ1: Âπ∂Ë°åÁºñËØë
          echo "üöÄ Phase 1: Parallel compilation"
          if make -j"$COMPILE_JOBS"; then
            echo "‚úÖ Parallel compilation succeeded"
            compile_success=true
          else
            echo "‚ö†Ô∏è Parallel compilation failed"
            
            # üîß Â¶ÇÊûú‰ΩøÁî®‰∫ÜÈ¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ‰∏îÂ§±Ë¥•ÔºåÊ∏ÖÁêÜÂπ∂ÈáçËØï
            if [ "${TOOLCHAIN_PREBUILT:-false}" = "true" ]; then
              echo "üîß Prebuilt toolchain may be incompatible, cleaning and retrying..."
              
              # Ê∏ÖÁêÜÂèØËÉΩÊúâÈóÆÈ¢òÁöÑÂ∑•ÂÖ∑Èìæ
              rm -rf staging_dir/toolchain-* build_dir/toolchain-*
              echo "TOOLCHAIN_PREBUILT=false" >> $GITHUB_ENV
              
              # ÈáçÊñ∞ÁîüÊàêÈÖçÁΩÆ
              make defconfig
              
              echo "üîÑ Retrying with fresh toolchain..."
              if make -j"$COMPILE_JOBS"; then
                echo "‚úÖ Retry with fresh toolchain succeeded"
                compile_success=true
              fi
            fi
          fi
          
          # Èò∂ÊÆµ2: ÂçïÁ∫øÁ®ãÁºñËØë
          if [ "$compile_success" != "true" ]; then
            echo "üîÑ Phase 2: Single-threaded compilation"
            if make -j1; then
              echo "‚úÖ Single-threaded compilation succeeded"
              compile_success=true
            fi
          fi
          
          # Èò∂ÊÆµ3: ËØ¶ÁªÜÊó•ÂøóÁºñËØë
          if [ "$compile_success" != "true" ]; then
            echo "üîç Phase 3: Verbose compilation"
            if make -j1 V=s; then
              echo "‚úÖ Verbose compilation succeeded"
              compile_success=true
            fi
          fi
          
          if [ "$compile_success" != "true" ]; then
            echo "‚ùå All compilation phases failed"
            
            # üîç ËØ¶ÁªÜÈîôËØØÂàÜÊûê
            echo "=== Error Analysis ==="
            echo "üìÇ Build directory:"
            ls -la build_dir/ | head -20
            
            echo "üìÑ Recent error logs:"
            find . -name "*.log" -mmin -30 -exec echo "=== {} ===" \; -exec tail -40 {} \; | head -200
            
            exit 1
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Compilation completed successfully"
          ccache -s

      # ============================================
      # üìä 6. ÁºìÂ≠òÁªüËÆ°ÂíåÂ∑•ÂÖ∑ÈìæÂ§á‰ªΩ
      # ============================================
      - name: üìä Cache Statistics & Toolchain Backup
        if: always()
        run: |
          cd "$OPENWRT_PATH"
          echo "=== üöÄ Enhanced Cache Report ==="
          echo "Date: $(date)"
          echo "Source Hash: $SOURCE_HASH"
          echo "Plugins Hash: $PLUGINS_HASH"
          echo "Week Key: $WEEK_KEY"
          echo ""
          
          echo "üìÅ Directory Sizes:"
          for dir in dl .ccache staging_dir build_dir/toolchain-* build_dir/host*; do
            if [ -d "$dir" ]; then
              du -sh "$dir" 2>/dev/null | sed 's/^/  /'
            fi
          done
          echo ""
          
          echo "üéØ ccache Final Statistics:"
          if command -v ccache >/dev/null 2>&1; then
            ccache -s | grep -E "(cache hit|cache miss|hit rate)" | sed 's/^/  /'
            
            # ËÆ°ÁÆóÂëΩ‰∏≠Áéá
            HITS=$(ccache -s | grep "cache hit" | grep -o '[0-9]\+' | head -1)
            MISSES=$(ccache -s | grep "cache miss" | grep -o '[0-9]\+' | head -1)
            if [ -n "$HITS" ] && [ -n "$MISSES" ] && [ $((HITS + MISSES)) -gt 0 ]; then
              HIT_RATE=$((HITS * 100 / (HITS + MISSES)))
              echo "  üìà Calculated Hit Rate: ${HIT_RATE}%"
              
              # üéØ ÁºìÂ≠òÂëΩ‰∏≠ÁéáÁõëÊéß
              if [ "$HIT_RATE" -lt 45 ]; then
                echo "  ‚ö†Ô∏è Warning: Cache hit rate below 45%"
              elif [ "$HIT_RATE" -gt 60 ]; then
                echo "  üéâ Excellent: Cache hit rate above 60%"
              fi
            fi
          fi
          echo ""
          
          echo "üîß Build Summary:"
          echo "  Prebuilt Toolchain Used: ${TOOLCHAIN_PREBUILT:-false}"
          echo "  Compile Jobs: $COMPILE_JOBS"
          echo "  Build Status: ${{ steps.compile.outputs.status }}"
          echo "================================="
          
          # üîß Â∑•ÂÖ∑ÈìæÂ§á‰ªΩ (‰∏∫‰∏ãÊ¨°ÊûÑÂª∫ÂáÜÂ§á)
          if [ "${{ steps.compile.outputs.status }}" = "success" ] && [ "${TOOLCHAIN_PREBUILT:-false}" != "true" ]; then
            echo "üì¶ Preparing toolchain backup..."
            if [ -d "staging_dir/toolchain-x86_64_gcc-13.3.0_musl" ] && [ -d "build_dir/toolchain-x86_64_gcc-13.3.0_musl" ]; then
              tar -czf "../toolchain-x86_64-${SOURCE_HASH}.tar.gz" staging_dir/toolchain-* build_dir/toolchain-* 2>/dev/null || true
              echo "üì§ Toolchain backup ready: $(ls -lh ../toolchain-x86_64-${SOURCE_HASH}.tar.gz 2>/dev/null || echo 'failed')"
            fi
          fi

      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          
          echo "=== Generated Files ==="
          ls -lah
          
          # Ëé∑ÂèñÂÜÖÊ†∏ÁâàÊú¨
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "$OPENWRT_PATH/.config" build.config
          
          # ÊâìÂåÖÂÜÖÊ†∏Ê®°Âùó
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # Ê∏ÖÁêÜ‰∏çÈúÄË¶ÅÁöÑÊñá‰ª∂
          rm -f feeds.buildinfo version.buildinfo *.manifest
          
          # ÁîüÊàêÂõ∫‰ª∂‰ø°ÊÅØ
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "source_hash": "$SOURCE_HASH",
            "toolchain_prebuilt": ${TOOLCHAIN_PREBUILT:-false},
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: üì§ Upload Artifacts
        if: ${{ steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6

      - name: üöÄ Create Release
        if: ${{ steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' }}
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} ‚Ä¢ ${{ env.FIRMWARE_TAG }} ‚Ä¢ Enhanced
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}] - Enhanced Build
            
            ### üìä ÊûÑÂª∫‰ø°ÊÅØ
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |------|------|
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏** | `${{ steps.organize.outputs.kernel_version }}` |
            | **Ê∫êÁ†ÅÂìàÂ∏å** | `${{ env.SOURCE_HASH }}` |
            | **È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ** | `${TOOLCHAIN_PREBUILT:-false}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **ÂØÜÁ†Å** | `${{ github.event.inputs.root_password }}` |
            
            ### üöÄ ÂÖ≥ÈîÆ‰ºòÂåñÁâπÊÄß
            - ‚úÖ **ÊÅ¢Â§ç53%+ÁºìÂ≠òÂëΩ‰∏≠ÁéáÈÖçÁΩÆ**
            - ‚úÖ **‰øÆÂ§çÈ¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÂÖºÂÆπÊÄßÈóÆÈ¢ò**  
            - ‚úÖ **Êô∫ËÉΩÈîôËØØÊÅ¢Â§çÊú∫Âà∂**
            - ‚úÖ **‰∏âÈò∂ÊÆµÁºñËØë‰øùÈöúÊàêÂäüÁéá**
            - ‚úÖ **Â¢ûÂº∫ÁºìÂ≠òÁ≠ñÁï•ÁõëÊéß**
            - ‚úÖ **Ëá™Âä®Â∑•ÂÖ∑ÈìæÂ§á‰ªΩ**
            
            ### üì¶ Êèí‰ª∂Áä∂ÊÄÅ
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            
            ---
            üîç **ÁºìÂ≠òÂëΩ‰∏≠ÁéáÁõÆÊ†á**: 53%+ (Â∑≤‰ºòÂåñÁºìÂ≠òÁ≠ñÁï•)  
            üõ†Ô∏è **È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ**: ÂÖºÂÆπÊÄßÈóÆÈ¢òÂ∑≤‰øÆÂ§ç  
            ‚ö° **ÁºñËØëÊó∂Èó¥**: È¢ÑËÆ°ÂáèÂ∞ë30-50%
