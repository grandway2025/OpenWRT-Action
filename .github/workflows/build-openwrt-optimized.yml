name: üíª Build OpenWrt (x86_64) - Ultimate

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.10"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      ssrp:
: "üöÄ ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      openclash:
        description: "‚ö° OpenClash"
        type: boolean
        default: true
      lucky:
        description: "üçÄ Lucky"
        type: boolean
        default: true
      oaf:
        description: "üõ°Ô∏è OpenAppFilter"
        type: boolean
        default: true
      use_prebuilt_toolchain:
        description: "üîß ‰ΩøÁî®È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ (ÂÆûÈ™åÊÄß)"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04
 timeout-minutes: 480

    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}

    steps:
      - name: üîß Setup Environment Variables
        id: setup-env
        run: |
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          VERSION=$(date +'%Y.%m.%d')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')

          PROC_COUNT=$(nproc)
          MEM_GB=$(( $(free -m | awk '/^Mem:/{print $2}') / 1024 ))
          JOBS=$(( MEM_GB / 2 ))
          JOBS(( JOBS > PROC_COUNT ? PROC_COUNT : JOBS ))
          JOBS=$(( JOBS < 1 ? 1 : JOBS ))

          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)

          WEEK_KEY=$(date +'%Y%U')

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "FILE_DATE=$FILE_DATE" >> $GITHUB_ENV
          echo "COMPILE_JOBS=$OBS" >> $GITHUB_ENV
          echo "PLUGINS_HASH=$PLUGINS_HASH" >> $GITHUB
          echo "WEEK_KEY=$WEEK_KEY" >> $GITHUB_ENV

          echo "CPU CORES: $PROC_COUNT"
          echo "MEMORY GB: $MEM_GB"
          echo "COMPILE JOBS: $JOBS"
          echo "PLUGINS HASH: $PLUGINS_HASH"
          echo "WEEK KEY: $WEEK_KEY"

 - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk

      - name: üíæ Setup Swap and Kernel Parameters
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swap
          sudo mkswap /swapfile
          sudo swapon /swapfile

          sudo tee -a /etc/sysctl.conf >/dev/null << EOF
          vm.swappiness=10
          vm.v_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          free -h

      - name: ‚úÖ Checkout OpenWrt Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üì• Clone OpenWrt Repository (Retry)
        id: clone-source
        run: |
          rm -rf openwrt
          for i in 1 2 3; do
            git clone --depth=1 -b "$REPO_BRANCH" "$REPO_URL" openwrt && break
            echo "Clone attempti failed, retrying..."
            sleep 10
          done
          cd openwrt
          echo "OPENWRT_PATH=$" >> $GITHUB_ENV
          SOURCE_HASH=$(git rev-parse HEAD)
          echo "SOURCE_HASH=$SOURCE_HASH" >> $GITHUB_ENV
          COMMIT_INFO=$(git log -1 --pretty=format:"%an|%ci|%s|%H")
          IFS='|' read -r AUTHOR DATE MESSAGE HASH <<<COMMIT_INFO"
          echo "COMMIT_AUTHOR=$AUTHOR" >> $GITHUB_ENV
          echo "MIT_DATE=$DATE" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$MESSAGE" >> $GITHUB_ENV
          echo "COMMIT_HASH=$HASH" >> $GITHUB_ENV

      # ===== ÁºìÂ≠òÁ≠ñÁï• =====
      - name: ‚òÅÔ∏è Cache Downloads (Ê∞∏‰πÖ)
        uses: actions/cache@v4
        with:
 path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-v6
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            downloads-${{ env.REPO_BRANCH }}      - name: ‚òÅÔ∏è Cache Toolchain (Ê∫êÁ†ÅÁªëÂÆö)
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v7
          restore-: |
            toolchain-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            toolchain-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Staging Directory (Ê∫êÁ†ÅÁªëÂÆö        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: staging-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v5
          restore-keys: |
            staging-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            staging-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Build Host (Êèí‰ª∂ÁªëÂÆö)
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/host*
          key: buildhost-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}{ env.WEEK_KEY }}-v5
          restore-keys: |
            buildhost-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            buildhost-${{ env.REPO_BRANCH }}-

      name: ‚òÅÔ∏è Cache ccache (Ê∫êÁ†ÅÁªëÂÆö)
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-${{ env.WEEK_KEY }}-v7
          restore-keys: |
           cache-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            ccache-${{ env.REPO_BRANCH }}-

      # ===== È¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÊîØÊåÅ =====
      - name: üîß Download Prebuilt Toolchain (optional)
        if: github.event.inputs.use_prebuilt_toolchain == 'true'
        id: download-toolchain
        continue-on-error: true
        run: |
          cd "$OPENWRT_PATH"
          TOOLCHAIN_URL="https://github.com/${{ github.repository }}/releases/download/toolchain-${REPO_BRANCH}/toolchain-x86_64-${SOURCE_HASH}.tar.gz"
 echo "Trying download prebuilt toolchain from $TOOLCHAIN_URL"
          if curl -fsSL --max-time 60 "$TOOLCHAIN_URL" -o toolchain.tar.gz; then
            echo "Extract toolchain..."
            if tar -xzf toolchain.tar.gz; then
              echo "TOOLCHAIN_PREBUILT=true" >> $GITHUB_ENV
              rm toolchain.tar.gz
              exit 0
            fi
          fi
          echo "TOOLCHAIN_PREBUILT=false" >> $GITHUB_ENV
          exit 1

      # ===== ÈÖçÁΩÆ feeds =====
      - name: üìö Configure Feeds
        run: |
          cd "$OPENWRT_PATH          rm -rf feeds tmp/packagecache
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # ===== ccache ÈÖçÁΩÆ =====
      - name: üîß Setup ccache
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          mkdir -p "$CCACHE_DIR"
          ccache -M 15G
          ccache -F 150000
 ccache --set-config=compression=true
          ccache --set-config=stats=true
          ccache --set-config=max_files=150000
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          ccache -p
          ccache -s

      # ===== Â∫îÁî®ÈÖçÁΩÆ =====
      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputsclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || '' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          [ -d "$GITHUB_WORKSPACE/files" ] && cp -r "$GITHUB_WORKSPACE/files" .
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          for s in preset-mihimo-core.sh preset-adguard-core.sh; do
            if [ -f "${{ github.workspace }}/scripts/$s" ]; then              chmod +x "${{ github.workspace }}/scripts/$s"
              "${{ github.workspace }}/scripts/$s" "$CLASH_KERNEL"
            fi
          done
          make defconfig
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      # ===== Âº∫Âà∂Ê∏ÖÁêÜ =====
      - name: üßπ Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          cp .config .config.backup
          make dirclean
          cp .config.backup .config
          make defconfig

      #‰æùËµñ =====
      - name: üì• Download Packages
        run: |
          cd "$OPENWRT_PATH"
          DOWNLOAD_JOBS=$((COMPILE_JOBS < 16 ? COMPILE_JOBS * 2 : 16))
          if command -v aria2c >/dev/null 2>&1; then
            make download -j"$_JOBS" DOWNLOAD_TOOL="aria2c -x 4 -s 4" || make download -j1
          else
            make download -j"$DOWNLOAD_J" || make download -j1
          fi

      # ===== ÁºñËØëÂõ∫‰ª∂ =====
      - name: üî® Compile Firmware
        id: compile
        timeout-minutes: 360
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CONFIG_CCACHE=y
          echo "Starting compilation with $COMPILE_JOBS jobs"
          echo "Prebuilt Toolchain Used: ${TOOLCHAIN_PREBUILT:-false}"
          ccache -s
          if make -j"$COMPILE_JOBS"; then
            echo "Parallel build succeeded"
          elif make -j1; then
            echo "Single-thread build succeeded"
          else
            echo "Parallel and single-thread build failed, with verbose"
            if make -j1 V=s; then
              echo "Verbose build succeeded"
            else
              echo "Build failed"
              echo "=== build_dir listing ===              ls -la build_dir/ | head -20
              echo "=== last 40 lines of logs ==="
              find . -name '*.log' -mmin -30 -exec tail -40 {} \;
              exit 1
            fi
          fi
          ccache -s
          echo "status=success" >> $GITHUB_OUTPUT

      # =====Â≠òÁªüËÆ°ÂèäÂ∑•ÂÖ∑ÈìæÂ§á‰ªΩ =====
      - name: üìä Cache Statistics & Toolchain Backup
        if: always()
 run: |
          cd "$OPENWRT_PATH"
          echo "=== Cache Report ==="
          echo "Date:)"
          echo "Source Hash: $SOURCE_HASH"
          echo "Plugins Hash: $PLUGINS_HASH"
          echo "Week Key: $WEEK_KEY"
          echo ""
          for dir in dl .ccache staging_dir build_dir/toolchain-* build_dir/; do
            if [ -d "$dir" ]; then du -sh "$dir"; fi
          done
          ccache -s | grep -E "(cache hit|cache miss|hit rate)" | sed 's/^/  /'

          HITS=$(ccache -s | grep "cache hit" | grep -o '[0-]\+' | head -1)
          MISSES=$(ccache -s | grep "cache miss" | grep -o '[0-9]\+' | head -1)
          if [ -n "$HITS" ] && [ -n "$MISSES" ] && [ $((HITS + MISSES)) -gt 0 ]; then
            HIT_RATE=$((HITS * 100 / (HITS + MISSES)))
            echo "Calculated Hit Rate: ${HIT_RATE}%"
          fi

          echo "Build Summary:"
          echo "  Prebuiltchain: ${TOOLCHAIN_PREBUILT:-false}"
          echo "  Compile Jobs: $COMPILE_JOBS"
          echo "  Build Status: ${{ steps.compile.outputs.status }}"

          if [ "${TOOLCHAIN_PREBUILT:-false}" != "true" then
            echo "Packaging toolchain for future builds..."
            if [ -d "staging_dir/toolchain-x86_64_gcc-13..0_musl" ] && [ -d "build_dir/toolchain-x86_64_gcc-13.3.0_musl" ]; then
              tar -czf "../toolchain-x86_-${SOURCE_HASH}.tar.gz" staging_dir/toolchain-* build_dir/toolchain-*
              ls -lh "../toolchain-x86_64-${SOURCE_HASH}.tar.gz"
            else
             Toolchain directories not found, skipping packaging."
            fi
          fi

      # ===== Êï¥ÁêÜÂõ∫‰ª∂ =====
      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          echo "Listing generated files:"
          ls -lah

          K_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi

          cp "$OPENWRT_PATH/.config" build.config

          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi

          rmf feeds.buildinfo version.buildinfo *.manifest

          cat > firmware_info.json <<EOF
{
  "build_date": "$BUILD_DATE",
  "build_version": "$VERSION",
  "build_id": "$BUILD_ID",
  "kernel_version": "$KERNEL_VERSION",
  "source_hash": "$SOURCE",
  "toolchain_prebuilt": ${TOOLCHAIN_PREBUILT:-false},
  "target": "$DEVICE_TARGET",
  "subtarget": "$DEVICE_SUBTARGET",
  "lan_address": "${{ github.event.inputs.lan_addr }}",
  "plugins": {
    "docker": ${{ github.event.inputs.docker }},
    "ssrp": ${{ github.event.inputs.ssrp }},
    "passwall": ${{.event.inputs.passwall }},
    "openclash": ${{ github.event.inputs.openclash }},
    "nikki": ${{ github.event.inputs.nikki }},
    "lucky": ${{ github.event.inputs.lucky }},
    "oaf ${{ github.event.inputs.oaf }}
  }
}
EOF

          echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
          echo "kernel_version=$KERNEL_VERSION" >>GITHUB_OUTPUT
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      # =====‰∏éÂèëÂ∏É =====
      - name: üì§ Upload Artifacts
        if: steps.compile.outputs.status 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6

      - name: üöÄ Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} ‚Ä¢ ${{ env.FIRMWARE_TAG }} ‚Ä¢ Ultimate
          allowUpdates: true
 tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
         : ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}] - Ultimate Build

            ### üìä ÊûÑÂª∫
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |------|------|
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏ | `${{ steps.organize.outputs.kernel_version }}` |
            | **Ê∫êÁ†ÅÂìàÂ∏å** | `${{ env.SOURCE_HASH }}` |
            | **È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ** | `${{ env.TOOLCHAIN_PREBUILT:-false }}` |
            | **LAN IP** | `${{.event.inputs.lan_addr }}` |
            | **ÂØÜÁ†Å** | `${{ github.event.inputs.root_password }}` ### üöÄ ‰ºòÂåñÁâπÊÄß
            - ‚úÖ Á®≥ÂÆö‰∏îÁªÜÂåñÁºìÂ≠òÁ≠ñÁï•ÔºåÊèêÂçáÂëΩ‰∏≠Áéá
            - ‚úÖ È¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÂ§±Ë¥•ÂõûÊ∫êÁ†ÅÁºñËØë
            - ‚úÖ ‰∏âÈò∂ÊÆµÁºñËØë‰øùÈöúÊûÑÂª∫ÊàêÂäü
            - ‚úÖ ÊøÄËøõ ccache ÈÖçÁΩÆ
            - ‚úÖ Â∑•ÂÖ∑ÈìæËá™Âä®ÊâìÂåÖÂ§á‰ªΩ
            - ‚úÖ ÈîôËØØÊ∏ÖÊô∞ËØäÊñ≠Êó•Âøó

            ### üì¶ Êèí‰ª∂Áä∂ÊÄÅ
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && ' Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' &&‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Passwall | ${{ github.event.inputs.pass == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' &&‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' &&‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Lucky | ${{ github.event.inputs.l == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
