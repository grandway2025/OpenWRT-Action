name: 💻 Build OpenWrt (x86_64) • Cache-Boosted
permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "默认 LAN 地址"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "Passwall"
        type: boolean
        default: true
      nikki:
        description: "Nikki"
        type: boolean
        default: true
      openclash:
        description: "OpenClash"
        type: boolean
        default: true
      lucky:
        description: "Lucky"
        type: boolean
        default: true
      oaf:
        description: "OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "强制清理构建目录"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  FIRMWARE_TAG: X86_64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
  CACHE_VERSION: v2025-03-01

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 600
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}

    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🔧 Setup Environment / Cache Keys
        id: env
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          VERSION=$(date +'%Y.%m.%d')
          BUILD_TS=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')

          CPU=$(nproc)
          MEM_GB=$(( $(free -m | awk '/^Mem:/{print $2}') / 1024 ))
          JOBS=$((MEM_GB/2)); [ $JOBS -gt $CPU ] && JOBS=$CPU; [ $JOBS -lt 1 ] && JOBS=1

          CFG="${{ github.workspace }}/$CONFIG_FILE"
          DIY="${{ github.workspace }}/$DIY_SCRIPT"
          CFG_HASH=$( [ -f "$CFG" ] && sha256sum "$CFG" | cut -c1-12 || echo nocfg )
          DIY_HASH=$( [ -f "$DIY" ] && sha256sum "$DIY" | cut -c1-12 || echo noscript )
          PLUGINS="${{ github.event.inputs.docker || 'false' }}|${{ github.event.inputs.ssrp || 'false' }}|${{ github.event.inputs.passwall || 'false' }}|${{ github.event.inputs.nikki || 'false' }}|${{ github.event.inputs.openclash || 'false' }}|${{ github.event.inputs.lucky || 'false' }}|${{ github.event.inputs.oaf || 'false' }}"
          PLUGINS_HASH=$(printf '%s' "$PLUGINS" | sha256sum | cut -c1-12)

          MONTH_KEY=$(date +'%Y%m')
          WEEK_KEY=$(date +'%Y%U')

          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$BUILD_TS"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
            echo "CFG_HASH=$CFG_HASH"
            echo "DIY_HASH=$DIY_HASH"
            echo "PLUGINS_HASH=$PLUGINS_HASH"
            echo "MONTH_KEY=$MONTH_KEY"
            echo "WEEK_KEY=$WEEK_KEY"
            echo "TOOLCHAIN_RELEASE_TAG=toolchain-${REPO_BRANCH}"
            echo "TOOLCHAIN_TARGET=x86_64"
          } >> $GITHUB_ENV

      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk

      - name: 💾 Swap + Memory Tune
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=40
          vm.dirty_ratio=12
          vm.dirty_background_ratio=4
          EOF
          sudo sysctl -p
          free -h

      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup

      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm

      - name: 📥 Clone OpenWrt
        run: |
          rm -rf openwrt
          git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "SOURCE_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Layer 1 caches（跨配置共享）
      - name: ☁️ Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-v1
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Feeds & Index (monthly)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/feeds
            openwrt/tmp/packagecache
          key: feeds-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.MONTH_KEY }}-v1
          restore-keys: |
            feeds-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            feeds-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Toolchain (source-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v1
          restore-keys: |
            toolchain-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            toolchain-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Host Staging (source-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: hoststaging-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-v1
          restore-keys: |
            hoststaging-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            hoststaging-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache Build Host (monthly)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/build_dir/host*
          key: buildhost-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.MONTH_KEY }}-v1
          restore-keys: |
            buildhost-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            buildhost-${{ env.REPO_BRANCH }}-

      - name: 🧰 Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: ♻️ Warm Toolchain from Release
        if: github.event.inputs.force_clean != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd "$OPENWRT_PATH"
          TAG="${TOOLCHAIN_RELEASE_TAG}"
          ARCH="${TOOLCHAIN_TARGET}"
          HASH_ASSET="toolchain-${ARCH}-${SOURCE_HASH}.tar.gz"
          LATEST_ASSET="toolchain-${ARCH}-latest.tar.gz"
          if gh release view "$TAG" >/dev/null 2>&1; then
            if gh release download "$TAG" -p "$HASH_ASSET" -D .; then
              tar -xzf "$HASH_ASSET"
            elif gh release download "$TAG" -p "$LATEST_ASSET" -D .; then
              tar -xzf "$LATEST_ASSET"
            fi
          fi

      - name: 📚 Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          if [ -f "${{ github.workspace }}/${{ env.FEEDS_CONF }}" ]; then
            cp "${{ github.workspace }}/${{ env.FEEDS_CONF }}" ./feeds.conf.default
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 🔥 Prepare ccache
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CCACHE_BASEDIR="$PWD"
          export PATH="/usr/lib/ccache:$PATH"
          mkdir -p "$CCACHE_DIR"
          ccache --set-config=max_size=20G
          ccache --set-config=max_files=300000
          ccache --set-config=compression=true
          ccache --set-config=compiler_check=content
          ccache --set-config=hash_dir=false
          ccache --set-config=sloppiness=file_macro,locale,time_macros,include_file_ctime,include_file_mtime,system_headers
          ccache -s || true

      - name: 🎨 Apply Custom Config
        id: applycfg
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
        run: |
          cd "$OPENWRT_PATH"
          [ -d "${{ github.workspace }}/files" ] && cp -r "${{ github.workspace }}/files" ./files
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          for s in preset-mihimo-core.sh preset-adguard-core.sh; do
            if [ -f "${{ github.workspace }}/scripts/$s" ]; then
              chmod +x "${{ github.workspace }}/scripts/$s"
              "${{ github.workspace }}/scripts/$s" "$CLASH_KERNEL"
            fi
          done
          make defconfig
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          FINAL_CFG_HASH=$(sha256sum .config | cut -c1-12)
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
            echo "FINAL_CFG_HASH=$FINAL_CFG_HASH"
          } >> $GITHUB_ENV

      # Layer 2 caches（目标/配置感知）
      - name: ☁️ Cache Target Sysroot + .pkgdir
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/target-*
            openwrt/build_dir/target-*/.pkgdir
          key: targets-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-v1
          restore-keys: |
            targets-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            targets-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            targets-${{ env.REPO_BRANCH }}-

      - name: ☁️ Cache ccache (multi-tier)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-v1
          restore-keys: |
            ccache-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-${{ env.SOURCE_HASH }}-
            ccache-${{ env.CACHE_VERSION }}-${{ env.REPO_BRANCH }}-
            ccache-${{ env.REPO_BRANCH }}-

      - name: 🧹 Force Clean (optional)
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          cp .config .config.bak
          make dirclean
          mv .config.bak .config
          make defconfig

      - name: 📥 Download Packages
        run: |
          cd "$OPENWRT_PATH"
          NJ=$((COMPILE_JOBS*2)); [ $NJ -gt 24 ] && NJ=24
          if command -v aria2c >/dev/null 2>&1; then
            make download -j"$NJ" DOWNLOAD_TOOL="aria2c -x 6 -s 6 -k 1M" || make download -j1
          else
            make download -j"$NJ" || make download -j1
          fi

      - name: 🔨 Compile
        id: compile
        timeout-minutes: 360
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export CCACHE_BASEDIR="$PWD"
          export PATH="/usr/lib/ccache:$PATH"
          echo "== ccache before =="; ccache -s || true
          if make -j"$COMPILE_JOBS" || make -j$((COMPILE_JOBS/2)) || make -j1 V=s; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "Build failed"; find . -name '*.log' -mtime -1 -exec echo '== {} ==' \; -exec tail -n 30 {} \; | head -400 || true
            exit 1
          fi
          echo "== ccache after =="; ccache -s || true

      - name: 📊 Cache Statistics
        if: always()
        run: |
          cd "$OPENWRT_PATH"
          for d in dl .ccache staging_dir build_dir/toolchain-* build_dir/target-*; do [ -e "$d" ] && du -sh "$d"; done
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR="$PWD/.ccache"
            STATS=$(ccache -s); echo "$STATS"
            echo "$STATS" | awk '
              /cache hit \(direct\)/{d=$3}
              /cache hit \(preprocessed\)/{p=$3}
              /cache miss/{m=$3}
              END{t=d+p+m; if(t>0) printf("Computed Hit Rate: %.2f%%\n",(d+p)*100/t); else print "Computed Hit Rate: N/A"}'
          fi

      - name: 📦 Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          ls -lah
          KERNEL_VERSION="unknown"
          if ls *.manifest >/dev/null 2>&1; then
            KERNEL_VERSION=$(grep '^kernel ' *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2)
          fi
          cp "$OPENWRT_PATH/.config" build.config
          [ -d packages ] && tar -czf kernel-modules.tar.gz packages && rm -rf packages
          rm -f feeds.buildinfo version.buildinfo *.manifest
          echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: 📤 Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30

      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }} • Cache Boost
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
