# =======================================================
# Author: P3TERX (Modified and Further Optimized)
# Goal: Maximize ccache hit rate for faster builds
# =======================================================

name: 💻 X86_64_demo
permissions:
  contents: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.1.200"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "🧹 强制清理缓存"
        type: boolean
        default: false
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false
jobs:
  build:
    name: 🏗️ Build OpenWrt
    runs-on: ubuntu-24.04 
    timeout-minutes: 720
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    steps:
      # ============================================
      # 1. 环境初始化
      # ============================================
      - name: 🔧 Setup Environment
        id: env
        run: |
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 构建信息
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # 自动并行计算
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          # 基于插件组合生成简化的缓存键
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)
          
          # 周次键（用于定期刷新缓存）
          WEEK_KEY=$(date +'%Y%U')
          
          # 导出环境变量
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
            echo "PLUGINS_HASH=$PLUGINS_HASH"
            echo "WEEK_KEY=$WEEK_KEY"
          } >> $GITHUB_ENV
      # ============================================
      # 2. 系统优化
      # ============================================
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: 💾 Setup Swap
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo sysctl vm.swappiness=10
          free -h
      # ============================================
      # 3. 代码检出
      # ============================================
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      # ============================================
      # 4. 构建依赖安装
      # ============================================
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
      # ============================================
      # 5. 源码准备与信息采集
      # ============================================
      - name: 📥 Prepare OpenWrt Source
        id: source
        run: |
          # 克隆指定深度的源码以获取commit hash
          git clone --depth=50 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          
          # 获取最新的 commit hash
          COMMIT_HASH=$(git log -1 --pretty=format:'%H')
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 获取提交信息
          COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s')
          IFS='|' read -r AUTHOR DATE MESSAGE <<< "$COMMIT_INFO"
          
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
          } >> $GITHUB_ENV
          
          echo "Source Commit: $COMMIT_HASH"
      # ============================================
      # 6. 🔥 优化的缓存策略 🔥
      # ============================================
      - name: ☁️ Cache Toolchain
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ env.WEEK_KEY }}-v8
          restore-keys: |
            toolchain-${{ env.REPO_BRANCH }}-${{ env.WEEK_KEY }}-
            toolchain-${{ env.REPO_BRANCH }}-
            
      - name: ☁️ Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-v1
          
      - name: ☁️ Cache ccache (Optimized)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          # 🔥 主键包含 commit hash，确保源码一致时才精确命中
          key: ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.COMMIT_HASH }}-v9
          # 🔥 恢复键逐级降级，优先使用本周缓存
          restore-keys: |
            ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-
            ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
      # ============================================
      # 7. 简化的 Feeds 配置
      # ============================================
      - name: 📚 Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          cp "${{ github.workspace }}/$FEEDS_CONF" ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # ============================================
      # 8. 🔥 极致 ccache 配置 🔥
      # ============================================
      - name: 🔥 Prepare ccache (Aggressive)
        run: |
          cd "$OPENWRT_PATH"
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          mkdir -p "$CCACHE_DIR"
          
          ccache -M 15G
          ccache -F 150000
          
          # 更宽松的设置以提高命中率
          ccache --set-config=compression=true
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          # 🔥 关键优化: 忽略文件元数据差异，极大提升CI环境命中率
          ccache --set-config=file_stat_matches=true

          echo "=== ccache configuration ==="
          ccache -p
          echo "=========================="
          # 清零统计数据，以便准确观察本次编译的命中情况
          ccache -z
      # ============================================
      # 9. 自定义配置及插件开关
      # ============================================
      - name: 🎨 Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # 复制自定义文件
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv $GITHUB_WORKSPACE/files $OPENWRT_PATH/files
          fi
          
          # 复制配置文件
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # 执行自定义脚本
          chmod +x -R "${{ github.workspace }}/scripts"
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          # 生成配置
          echo "⚙️ Generating defconfig..."
          make defconfig
          
          # 提取目标信息
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          # 获取最新版本
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases/latest" | \
            grep -m1 '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' || echo "unknown")
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "📱 Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "📌 Latest Release: $LATEST_RELEASE"
          
          # 显示插件状态
          echo "📦 Plugin Status:"
          echo "  Docker: $ENABLE_DOCKER"
          echo "  SSRP: $ENABLE_SSRP"
          echo "  Passwall: $ENABLE_PASSWALL"
          echo "  OpenClash: $ENABLE_OPENCLASH"
          echo "  Nikki: $ENABLE_NIKKI"
          echo "  Lucky: $ENABLE_LUCKY"
          echo "  OAF: $ENABLE_OAF"
      # ============================================
      # 10. 强制清理
      # ============================================
      - name: 🧹 Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          make dirclean
      # ============================================
      # 11. 下载依赖包
      # ============================================
      - name: 📥 Download Packages
        run: |
          cd "$OPENWRT_PATH"
          make download -j"$COMPILE_JOBS" V=s
      # ============================================
      # 12. 编译固件
      # ============================================
      - name: 🔨 Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          export FORCE_UNSAFE_CONFIGURE=1
          
          echo "🔨 Starting compilation..."
          echo "=== ccache initial stats ==="
          ccache -s
          echo "=========================="
          
          # 使用 make -j$N V=s 进行编译
          if ! make -j"$COMPILE_JOBS" V=s; then
            echo "❌ Compilation failed, check logs for details."
            # (可选) 输出详细日志以供调试
            # find logs -name "*.log" -mtime -1 -exec echo "=== {} ===" \; -exec tail -n 50 {} \;
            exit 1
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT
          echo "=== ccache final stats ==="
          ccache -s || echo "ccache stats not available"
          echo "Cache directory size: $(du -sh .ccache 2>/dev/null || echo 'N/A')"
          echo "========================="
      # ============================================
      # 13. 统计与整理
      # ============================================
      - name: 📊 Cache & Firmware Statistics
        if: always()
        id: organize
        run: |
          echo "=== ccache final stats ==="
          cd "$OPENWRT_PATH"
          export CCACHE_DIR="$PWD/.ccache"
          ccache -s
          echo "=========================="

          if [[ "${{ steps.compile.outputs.status }}" == "success" ]]; then
            cd bin/targets/*/*
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
            cp "$OPENWRT_PATH/.config" build.config
            rm -f feeds.buildinfo version.buildinfo *.manifest packages
            
            {
              echo "firmware_path=$PWD"
              echo "kernel_version=$KERNEL_VERSION"
            } >> $GITHUB_OUTPUT
            echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          fi
      # ============================================
      # 14. 上传 Artifacts
      # ============================================
      - name: 📤 Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
      # ============================================
      # 15. 创建 Release
      # ============================================
      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }} • ${{ env.LATEST_RELEASE }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## 🎯 OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### 📊 构建信息
            | 项目 | 信息 |
            |---|---|
            | **版本** | `${{ env.LATEST_RELEASE }}` |
            | **日期** | `${{ env.BUILD_DATE }}` |
            | **源码** | `${{ env.COMMIT_HASH }}` |
            | **内核** | `${{ steps.organize.outputs.kernel_version }}` |
            
            ### 📦 包含的插件
            | 插件 | 状态 |
            |---|---|
            | Docker | ${{ github.event.inputs.docker == 'true' && '✅' || '❌' }} |
            | SSR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '✅' || '❌' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '✅' || '❌' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '✅' || '❌' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '✅' || '❌' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '✅' || '❌' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '✅' || '❌' }} |
